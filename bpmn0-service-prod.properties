# Server Configuration
server.port=8087
server.servlet.context-path=/bpmn0-api
spring.application.name=bpmn0-service

base-url=http://www.tamky.xyz:${server.port}
# Disable Eureka client in standalone profile
eureka.client.enabled=false

logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web=DEBUG        
logging.level.org.springframework.security=DEBUG   
logging.level.org.springframework.boot=DEBUG      
logging.level.org.springframework.boot.autoconfigure=WARN
logging.level.org.activiti=DEBUG  
logging.level.org.hibernate=INFO
logging.level.org.keycloak=DEBUG
logging.level.com.jdvn.devtech.businessprocess=DEBUG
logging.pattern.file="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    
keycloak.realm=mydev
keycloak.auth-server-url=http://www.tamky.xyz:8080
    
# Keycloak config for a front-end use spring boot 3 that need to redirect to login
spring.security.oauth2.client.registration.keycloak.client-id=activiti0-service
spring.security.oauth2.client.registration.keycloak.client-secret=vY8hAe3tYcT5BNLD7t3sF4UIRXep9Tyi
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid,profile
spring.security.oauth2.client.registration.keycloak.redirect-uri=${base-url}/login/oauth2/code/keycloak

spring.security.oauth2.client.provider.keycloak.authorization-uri==${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.issuer-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# Keycloak config for a back-end use spring boot 3 like this book-service that works as a 
# resource server to validate JWT tokens and to secure Rest APIs based extracted roles
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/certs

# REST
spring.data.rest.defaultMediaType=application/json
# DATASOURCE
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://postgis-db:5432/base0?currentSchema=activiti
spring.datasource.username={cipher}2ef0c1d40901e6a087a0499727d9b8d2d21fa642ace7d1f2d70f9991a78a6545
spring.datasource.password={cipher}4e445ba08555ce52e668f06f9b8b6469dd091fec083ad066e68f7742fc9778f7
spring.datasource.max-active=100
spring.datasource.max-idle=8
spring.datasource.min-idle=8
spring.datasource.initial-size=10
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=true
spring.datasource.test-on-return=false
spring.datasource.test-while-idle=true
spring.datasource.time-between-eviction-runs-millis=3600000
spring.datasource.min-evictable-idle-time-millis=10800000
spring.datasource.platform=postgres
spring.datasource.continue-on-error=true
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

# Specify the custom SQL scripts to initialize the database
spring.datasource.data=classpath:/sql/activiti.postgres.create.engine.sql,classpath:/sql/activiti.postgres.create.history.sql
spring.datasource.initialization-mode=always
# HIBERNATE
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.use_structured_entries=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Handle large files allows files up to 100MB each and a total request size of up to 500MB
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=500MB
file.upload-dir=./upload
#Email service settings
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username={cipher}5e07c5af43c378b642cf36e1058aa70761aeec03a8786bbf1ab9afad5d39cb3750675745f4ddef1f9779f672104300df
# Use an App password if 2FA is enabled
spring.mail.password={cipher}91b088916606ebbdfd026c150d203a892d50f7175de78ef867647f20617711097736c27fec624fc31a89bf924d06f80a  
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

activiti.database-schema-update=true 

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.url=/v3/api-docs 


activiti.database-schema-update=true 

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.url=/v3/api-docs
